#!/usr/local/bin/python3
"""
Author : Diplav
Server to interact with client 
./server --host localhost --port 50051
"""
from concurrent import futures
import time 

import grpc
import image_pb2
import image_pb2_grpc
import argparse
from utils import nlimage_to_pil,pil_to_NLImage, compute_mean_image

class NLImageServiceServicer(image_pb2_grpc.NLImageServiceServicer):
    def RotateImage(self, request, context):
        print("Request to rotate image")
        rotation_degree = request.rotation * 90
        # convert image to PIL format
        pil_img = nlimage_to_pil(request.image.data, request.image.width, request.image.height, request.image.color)
        # rotate the input according to input degree
        rotated_pil = pil_img.rotate(angle=rotation_degree)
        # convert the image back into NLImage format
        rotated_nlimage = pil_to_NLImage(rotated_pil)
        return rotated_nlimage
    
    def MeanFilter(self, request, context):
        print("Request to compute mean image")
        # compute the mean image
        mean_nlimage = compute_mean_image(request.data, request.width, request.height, request.color)
        return mean_nlimage


def serve(args):
    # create server 
    host = args.host
    server_port = args.port
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
    # assign the server with NLImageServiceServicer which we want it to execute
    image_pb2_grpc.add_NLImageServiceServicer_to_server(NLImageServiceServicer(),server)
    # add server at specified host and port
    server.add_insecure_port('{}:{}'.format(host, server_port))
    server.start()
    server.wait_for_termination()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--host',type=str,default='localhost')
    parser.add_argument('--port',type=str,default='50051')
    args = parser.parse_args()
    serve(args)





